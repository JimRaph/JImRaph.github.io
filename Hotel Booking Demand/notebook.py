# -*- coding: utf-8 -*-
"""notebook.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cT1zxcg1lPefbxLStPeiNJWudHEl4R7n

# Hotel Booking Demand
"""

import pandas as pd

dataset_main = pd.read_csv("hotel_bookings_clean.csv")
dataset = dataset_main.copy()

"""## Data Dictionary
_Note: For binary variables: `1` = true and `0` = false._

| Column                                                                                                                                                                                                          | Explanation                                                                                                                            |   |   |   |
|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------|---|---|---|
| is_canceled                                                                                                                                                                                                     | Binary variable indicating whether a booking was canceled                                                                              |   |   |   |
| lead_time                                                                                                                                                                                                       | Number of days between booking date and arrival date                                                                                   |   |   |   |
| arrival_date_week_number, arrival_date_day_of_month, arrival_date_month                                                                                                                                         | Week number, day date, and month number of arrival date                                                                                |   |   |   |
| stays_in_weekend_nights, stays_in_week_nights                                                                                                                                                                   | Number of weekend nights (Saturday and Sunday) and weeknights (Monday to Friday) the customer booked                                   |   |   |   |
| adults, children, babies                                                                                                                                                                                        | Number of adults, children, babies booked for the stay                                                                                 |   |   |   |
| is_repeated_guest                                                                                                                                                                                               | Binary variable indicating whether the customer was a repeat guest                                                                     |   |   |   |
| previous_cancellations                                                                                                                                                                                          | Number of prior bookings that were canceled by the customer                                                                            |   |   |   |
| previous_bookings_not_canceled                                                                                                                                                                                  | Number of prior bookings that were not canceled by the customer                                                                        |   |   |   |
| required_car_parking_spaces                                                                                                                                                                                     | Number of parking spaces requested by the customer                                                                                     |   |   |   |
| total_of_special_requests                                                                                                                                                                                       | Number of special requests made by the customer                                                                                        |   |   |   |
| avg_daily_rate                                                                                                                                                                                                  | Average daily rate, as defined by dividing the sum of all lodging transactions by the total number of staying nights                   |   |   |   |
| booked_by_company                                                                                                                                                                                               | Binary variable indicating whether a company booked the booking                                                                        |   |   |   |
| booked_by_agent                                                                                                                                                                                                 | Binary variable indicating whether an agent booked the booking                                                                         |   |   |   |
| hotel_City                                                                                                                                                                                                      | Binary variable indicating whether the booked hotel is a "City Hotel"                                                                  |   |   |   |
| hotel_Resort                                                                                                                                                                                                    | Binary variable indicating whether the booked hotel is a "Resort Hotel"                                                                |   |   |   |
| meal_BB                                                                                                                                                                                                         | Binary variable indicating whether a bed & breakfast meal was booked                                                                   |   |   |   |
| meal_HB                                                                                                                                                                                                         | Binary variable indicating whether a half board meal was booked                                                                        |   |   |   |
| meal_FB                                                                                                                                                                                                         | Binary variable indicating whether a full board meal was booked                                                                        |   |   |   |
| meal_No_meal                                                                                                                                                                                                    | Binary variable indicating whether there was no meal package booked                                                                    |   |   |   |
| market_segment_Aviation, market_segment_Complementary, market_segment_Corporate, market_segment_Direct, market_segment_Groups, market_segment_Offline_TA_TO, market_segment_Online_TA, market_segment_Undefined | Indicates market segment designation with a value of 1. "TA"= travel agent, "TO"= tour operators                                       |   |   |   |
| distribution_channel_Corporate, distribution_channel_Direct, distribution_channel_GDS, distribution_channel_TA_TO, distribution_channel_Undefined                                                               | Indicates booking distribution channel with a value of 1. "TA"= travel agent, "TO"= tour operators, "GDS" = Global Distribution System |   |   |   |
| reserved_room_type_A, reserved_room_type_B, reserved_room_type_C, reserved_room_type_D, reserved_room_type_E, reserved_room_type_F, reserved_room_type_G, reserved_room_type_H, reserved_room_type_L            | Indicates code of room type reserved with a value of 1. Code is presented instead of designation for anonymity reasons                 |   |   |   |
| deposit_type_No_Deposit                                                                                                                                                                                         | Binary variable indicating whether a deposit was made                                                                                  |   |   |   |
| deposit_type_Non_Refund                                                                                                                                                                                         | Binary variable indicating whether a deposit was made in the value of the total stay cost                                              |   |   |   |
| deposit_type_Refundable                                                                                                                                                                                         | Binary variable indicating whether a deposit was made with a value under the total stay cost                                           |   |   |   |
| customer_type_Contract                                                                                                                                                                                          | Binary variable indicating whether the booking has an allotment or other type of contract associated to it                             |   |   |   |
| customer_type_Group                                                                                                                                                                                             | Binary variable indicating whether the booking is associated to a group                                                                |   |   |   |
| customer_type_Transient                                                                                                                                                                                         | Binary variable indicating whether the booking is not part of a group or contract, and is not associated to other transient booking    |   |   |   |
| customer_type_Transient-Party                                                                                                                                                                                   | Binary variable indicating whether the booking is transient, but is associated to at least another transient booking                   |   |   |   |
"""

dataset_columns = dataset.columns
print(dataset_columns)

dataset.info()

import numpy as np
dataset.isna().sum()
val_t = np.where(dataset['children'].isna()==True)
val_t = list(val_t[0])
val_t

children_index = dataset.columns.get_loc('children')
adult_index = dataset.columns.get_loc('adults')
babies_index = dataset.columns.get_loc('babies')
dataset.iloc[val_t,[children_index,adult_index,babies_index]]

val = int(dataset['children'].mean())
print(val)
dataset['children'].fillna(value=val, inplace=True)
dataset['children'].isna().sum()
dataset.iloc[val_t,[children_index,adult_index,babies_index]]

dataset.describe()

dataset_columns

"""Family Size:"""

#to generate family size
dataset['family_size'] = dataset[['adults','children','babies']].sum(axis='columns')
dataset['family_size'].unique()

"""The Hotels have family sizes of 2, 1, 3, 4, 5, 12, 40, 26, 50, 27, 55, 20, 6, 10

"""

import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt

#check the number of occurrence of each family size
dataset['family_size'].value_counts()

#visualization of number of occurence of each family size
ax = sns.countplot(x='family_size', data = dataset)
ax.set_title('Counts of each family size')

fam_cancel_size = dataset[dataset['is_canceled']==1].groupby('family_size')['is_canceled'].value_counts()
max_family_cancelsize = fam_cancel_size.nlargest(1)
print(max_family_cancelsize)

"""A FAMILY SIZE OF TWO HAS THE HIGHEST CANCELLATION RATE"""

dataset['previous_cancellations'].unique()

#family size with the highest previous cancellation rate, rate of cancellation
max_family_cancelsize = dataset[dataset['previous_cancellations']==26].groupby('family_size')['previous_cancellations'].value_counts()
print(max_family_cancelsize)

"""The family size of two has the highest previous cancellation (26) which occurred twenty-six (26) times."""

#Create a plot that visualizes the cancellation rates of different times of the year
#distribution of cancellation across the months in a year

dataset['arrival_date_month'] = dataset['arrival_date_month'].astype('category')
monthly_cancel_dist = dataset[dataset['is_canceled']==1]

#visualization for booking status across the months

sns.histplot(x='arrival_date_month', data=dataset, hue='is_canceled', discrete=False, binwidth=0.5, multiple='dodge')

#visualization for canceled bookings across the months
ax =sns.histplot(x='arrival_date_month',data=monthly_cancel_dist,color='blue', discrete = False, binwidth=0.1)
ax.set_xticks([1,2,3,4,5,6,7,8,9,10,11,12])
ax.set_xticklabels(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'])

#for quarterly distribution

quarterly_dist = dataset[dataset['is_canceled']==1].groupby('arrival_date_month')[['is_canceled']].value_counts()

first_quarter=[]
second_quarter=[]
fourth_quarter=[]
third_quarter=[]

for i in quarterly_dist.index:
    if i[0] == 0 or i[0] <=3:
        first_quarter.append(quarterly_dist[i])
    elif i[0]>=4 and i[0]<=6:
        second_quarter.append(quarterly_dist[i])
    elif i[0]>=7 and i[0]<=9:
        third_quarter.append(quarterly_dist[i])
    elif i[0]>9 and i[0]<=12:
        fourth_quarter.append(quarterly_dist[i])

first_quarter=np.sum(first_quarter)
second_quarter =np.sum(second_quarter)
third_quarter = np.sum(third_quarter)
fourth_quarter=np.sum(fourth_quarter)

data_dict= {'first_quarter':first_quarter,
'second_quarter' :second_quarter,
'third_quarter' : third_quarter,
'fourth_quarter':fourth_quarter}

print(first_quarter, second_quarter,third_quarter,fourth_quarter)

#visualization of quarterly distribution
sns.barplot(x=list(data_dict.keys()),y=list(data_dict.values()))

"""THIRD QUARTER HAS THE HIGHEST CANCELLATION RATE

Are bookings with longer lead times more likely to result in a cancellation?
"""

data_lead = dataset[['lead_time','is_canceled']]

data_gp = data_lead.groupby('lead_time')['is_canceled'].value_counts()
data_gp

sns.boxplot(x='is_canceled',y='lead_time',data=data_lead)

"""THE BOXPLOT AND SCATTERPLOT SUGGEST THAT LONGER LEAD TIME DOES LEAD TO CANCELLATION"""

val_temp = dataset[['reserved_room_type_A', 'reserved_room_type_B', 'reserved_room_type_C', 'reserved_room_type_D', 'reserved_room_type_E', 'reserved_room_type_F', 'reserved_room_type_G', 'reserved_room_type_H', 'reserved_room_type_L']]
val_temp.head()

val_temp2 = dataset[['distribution_channel_Corporate', 'distribution_channel_Direct', 'distribution_channel_GDS', 'distribution_channel_TA_TO', 'distribution_channel_Undefined']]
val_temp2.head()

val_temp3 = dataset[['market_segment_Aviation', 'market_segment_Complementary', 'market_segment_Corporate', 'market_segment_Direct', 'market_segment_Groups', 'market_segment_Offline_TA_TO', 'market_segment_Online_TA', 'market_segment_Undefined']]
val_temp3.head(10)

"""**Create model for prediction**"""

X = dataset.drop('is_canceled',axis='columns').values
y = dataset['is_canceled'].values

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import cross_val_score, KFold
from sklearn.preprocessing import StandardScaler

X_train, X_test, y_train, y_test = train_test_split(X,y,random_state=1,test_size=0.2 ,stratify=y)

scaler = StandardScaler()

X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

X_train.shape, X_test.shape

log_model = LogisticRegression()
log_model.fit(X_train, y_train)
log_model_pred = log_model.predict(X_test)

log_model_train_score = log_model.score(X_train, y_train)
log_model_test_score= log_model.score(X_test,y_test)

print(f'Logistic regression has an train accuracy score of {log_model_train_score}')
print(f'Logistic regression has an test accuracy score of {log_model_test_score}')

#using cross_validation for comparison

split_size = KFold(n_splits=3,shuffle=True, random_state=2)

cvs = cross_val_score(log_model, X,y, cv=split_size)

print(f'Cross_val_score model has an accuracy of {cvs.mean()}')

"""Comparing with xgboost"""

import xgboost as xgb
from sklearn.metrics import accuracy_score

train_set = xgb.DMatrix(X_train,label=y_train,enable_categorical = True)
test_set = xgb.DMatrix(X_test, label=y_test, enable_categorical= True)

params = {
    'eta':0.2,
    'max_depth': 4,
    'objective':'multi:softmax',
    'num_class':2
}
epochs = 50

#to evaluates
val_set = [(train_set,'training'),(test_set,'validating')]
model_xgb = xgb.train(params, train_set,epochs,evals=val_set,verbose_eval=10)

pred = model_xgb.predict(test_set)
print(accuracy_score(y_test,pred))

"""Motivation:
To improve room allocation services to customers. The hotels should be able to know where and if an already booked room can be issued out, thereby improving efficiency in day-to-day operations

Data cleaning: The dataset was mostly cleaned with just the 'children variable' containing few missing values. the missing values were replaced with the mean of the column converted into integer.

Findings:
Family size of 2 has the highest cancellation and previous cancellations
Most cancellations happened in august
Most cancellations happened in the third quarter followed closely by the second quarter
Using a logistic regression model for prediction model gives over 80% of accuracy score
With cross validation, an accuracy of over 70% was achieved.
when regularization models were used, low scores were achieved(could it be due to colinearity?)

**CONCLUSION:**
The model should be used
"""